<?php

namespace Theme\Core\ViteJs;

trait Helpers
{
    /**
     * Get manifest file generated by Vite.
     */
    public function getManifest(string $rootPath = 'dist/manifest.json'): object
    {
        $strJsonFileContents = file_get_contents(dirname(__FILE__).'/../../../'.$rootPath);

        return json_decode(str_replace('\u0000', '', $strJsonFileContents));
    }

    public function getTokenName(string $key): string
    {
        // Get token file.
        // model $key assets/main-legacy-fe2da1bc.js
        $k = explode('-', $key);
        $token = $key;
        // ex: $k[1] | $k[2] = fe2da1bc.js
        if (array_key_exists(1, $k)) {
            // Take key 1 or 2.
            $t = array_key_exists(2, $k) ? explode('.', $k[2]) : explode('.', $k[1]);
            // ex: $kt[0] = fe2da1bc
            if (array_key_exists(0, $t)) {
                $token = $t[0];
            }
        }

        return $token;
    }

    public function orderManifest(array $manifest): array
    {
        // Remove entries that have no 'isEntry'.
        $cleaned = $this->keepEntries($manifest);

        // Order entries with legacy and polyfill at the end of array.
        $ordered = $this->moveLegacyAndPolyfill($cleaned);

        $orderedWithToken = [];
        // Add token.
        foreach ($ordered['ordered'] as $key => $value) {
            $orderedWithToken[$this->getTokenName($value->file)] = $value;
        }

        return $orderedWithToken;
    }

    /**
     * Move polyfill and legacy at the end of array.
     */
    public function moveLegacyAndPolyfill(array $manifest): array
    {
        $legacy = null;
        $polyfill = null;
        $cleaned = [];
        foreach ($manifest as $value) {
            // Polyfill.
            if (strpos($value->src, 'polyfills') > 0 && strpos($value->src, 'legacy') > 0) {
                $polyfill = $value;
                // Legacy.
            } elseif (strpos($value->src, 'polyfills') === false && strpos($value->src, 'legacy') > 0) {
                $legacy = $value;
            } else {
                $cleaned[] = $value;
            }
        }

        return [
            'legacy' => $legacy,
            'polyfill' => $polyfill,
            'cleaned' => $cleaned,
            // Polyfill before legacy.
            'ordered' => array_merge($cleaned, [$polyfill, $legacy]),
        ];
    }

    /**
     * Remove values that have no 'isEntry'.
     */
    public function keepEntries(array $manifest): array
    {
        $clean = [];
        foreach ($manifest as $value) {
            if (property_exists($value, 'isEntry') === true) {
                $clean[] = $value;
            }
        }

        return $clean;
    }
}
